type User {
  id: Int!
  name: String!
  email: String!
  createdAt: String
  createdRooms: [Room]!
  createdEvents: [RoomEvent]!
  roomEventPresences: [RoomEventPresence]!
}

type Room {
  id: Int!
  name: String!
  localization: String
  createdAt: String
  createdBy: User!
  events: [RoomEvent]!
}

type RoomEvent {
  id: Int!
  name: String!
  description: String
  minimumAge: Int
  startingTime: String
  endingTime: String
  createdAt: String
  modifiedAt: String
  room: Room!
  createdBy: User!
  roomEventPresences: [RoomEventPresence]!
}

type RoomEventPresence {
  id: Int!
  createdAt: String
  user: User!
  event: RoomEvent!
}

type Query {
  users: [User!]!
  user(id: Int!): User

  rooms: [Room!]!

  roomEvents: [RoomEvent!]!

  presences: [RoomEventPresence!]!
}

type Mutation {
  createUser(name: String!, email: String!): User
}
